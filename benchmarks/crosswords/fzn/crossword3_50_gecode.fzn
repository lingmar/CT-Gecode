predicate table_int(array [int] of var int: x,array [int,int] of int: t);
array [1..26] of int: words1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26];
array [1..366] of int: words2 = [1,3,1,7,1,12,1,13,1,18,1,19,1,20,1,21,1,22,2,1,2,5,2,9,2,11,2,18,3,1,3,4,3,6,3,9,3,12,3,13,3,15,3,18,3,19,3,21,4,9,4,18,5,4,5,18,5,19,5,21,6,5,6,13,6,18,7,5,7,1,7,4,7,5,8,5,8,6,8,7,8,15,8,26,9,14,9,15,9,18,9,20,10,15,10,18,11,18,12,1,12,5,12,9,12,14,12,18,12,20,12,21,13,2,13,4,13,7,13,14,13,15,13,18,13,19,13,20,14,1,14,2,14,4,14,5,14,9,14,16,15,11,15,2,15,19,15,26,16,1,16,2,16,4,16,12,16,13,16,15,16,20,16,21,18,1,18,2,18,4,18,5,18,8,18,14,18,21,18,24,19,2,19,3,19,5,19,9,19,13,19,14,19,17,19,18,19,20,20,1,20,2,20,3,20,8,20,9,20,12,20,13,20,25,21,18,22,1,23,13,23,21,24,5,25,2,26,14,26,18,1,4,1,8,1,13,1,14,1,19,1,20,1,24,1,25,2,5,2,25,3,19,4,2,4,15,5,8,5,13,5,19,5,24,6,1,7,15,7,19,8,1,8,5,8,9,8,15,9,4,9,6,9,14,9,19,9,20,11,23,11,3,11,19,12,1,12,15,12,19,13,1,13,5,13,9,13,19,13,21,13,25,14,15,14,21,15,6,15,8,15,14,15,18,15,23,15,24,16,8,16,1,16,9,18,5,18,19,19,8,19,15,20,9,20,15,20,19,21,8,21,13,21,16,21,19,22,19,23,5,25,1,25,5,25,15];
array [1..2] of int: X_INTRODUCED_8 = [1,-1];
var 1..26: X_INTRODUCED_1;
var 1..26: X_INTRODUCED_2;
var 1..26: X_INTRODUCED_3;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced  = true;
array [1..4] of var int: L:: output_array([0..3]) = [1,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
array [1..1] of var int: X_INTRODUCED_4 ::var_is_introduced  = [X_INTRODUCED_3];
array [1..2] of var int: X_INTRODUCED_5 ::var_is_introduced  = [X_INTRODUCED_1,X_INTRODUCED_2];
array [1..2] of var int: X_INTRODUCED_6 ::var_is_introduced  = [X_INTRODUCED_2,X_INTRODUCED_3];
array [1..1] of var int: X_INTRODUCED_7 ::var_is_introduced  = [X_INTRODUCED_1];
constraint table_int(X_INTRODUCED_4,words1);
constraint table_int(X_INTRODUCED_5,words2);
constraint table_int(X_INTRODUCED_6,words2);
constraint table_int(X_INTRODUCED_7,words1);
constraint array_bool_or([X_INTRODUCED_9,X_INTRODUCED_10],true);
constraint array_bool_or([X_INTRODUCED_12,X_INTRODUCED_13],true);
constraint array_bool_or([X_INTRODUCED_14,X_INTRODUCED_15],true);
constraint int_lin_ne_reif(X_INTRODUCED_8,[X_INTRODUCED_1,X_INTRODUCED_2],0,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint int_lin_ne_reif([-1],[X_INTRODUCED_3],-1,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint int_lin_ne(X_INTRODUCED_8,[X_INTRODUCED_1,X_INTRODUCED_3],0);
constraint int_lin_ne_reif(X_INTRODUCED_8,[X_INTRODUCED_2,X_INTRODUCED_1],0,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint int_lin_ne_reif(X_INTRODUCED_8,[X_INTRODUCED_3,X_INTRODUCED_2],0,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint int_lin_ne_reif(X_INTRODUCED_8,[X_INTRODUCED_2,X_INTRODUCED_3],0,X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint int_lin_ne_reif([1],[X_INTRODUCED_3],1,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
solve :: int_search(L,first_fail,indomain_min,complete) satisfy;
