array [1..26] of int: X_INTRODUCED_7 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26];
array [1..183] of int: X_INTRODUCED_12 = [1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,5,5,5,5,6,6,6,7,7,7,7,8,8,8,8,8,9,9,9,9,10,10,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,22,23,23,24,25,26,26,1,1,1,1,1,1,1,1,2,2,3,4,4,5,5,5,5,6,7,7,8,8,8,8,9,9,9,9,9,11,11,11,12,12,12,13,13,13,13,13,13,14,14,15,15,15,15,15,15,16,16,16,18,18,19,19,20,20,20,21,21,21,21,22,23,25,25,25];
array [1..183] of int: X_INTRODUCED_14 = [3,7,12,13,18,19,20,21,22,1,5,9,11,18,1,4,6,9,12,13,15,18,19,21,9,18,4,18,19,21,5,13,18,5,1,4,5,5,6,7,15,26,14,15,18,20,15,18,18,1,5,9,14,18,20,21,2,4,7,14,15,18,19,20,1,2,4,5,9,16,11,2,19,26,1,2,4,12,13,15,20,21,1,2,4,5,8,14,21,24,2,3,5,9,13,14,17,18,20,1,2,3,8,9,12,13,25,18,1,13,21,5,2,14,18,4,8,13,14,19,20,24,25,5,25,19,2,15,8,13,19,24,1,15,19,1,5,9,15,4,6,14,19,20,23,3,19,1,15,19,1,5,9,19,21,25,15,21,6,8,14,18,23,24,8,1,9,5,19,8,15,9,15,19,8,13,16,19,19,5,1,5,15];
array [1..2] of int: X_INTRODUCED_23 = [1,-1];
var 1..26: X_INTRODUCED_1;
var 1..26: X_INTRODUCED_2;
var 1..26: X_INTRODUCED_3;
var 1..26: X_INTRODUCED_5 ::var_is_introduced ;
var 1..183: X_INTRODUCED_10 ::var_is_introduced ;
var 1..183: X_INTRODUCED_17 ::var_is_introduced ;
var 1..26: X_INTRODUCED_21 ::var_is_introduced ;
var bool: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_26 ::var_is_introduced  = true;
array [1..4] of var int: L:: output_array([0..3]) = [1,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
constraint array_int_element(X_INTRODUCED_5,X_INTRODUCED_7,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint array_int_element(X_INTRODUCED_10,X_INTRODUCED_12,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint array_int_element(X_INTRODUCED_10,X_INTRODUCED_14,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint array_int_element(X_INTRODUCED_17,X_INTRODUCED_12,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint array_int_element(X_INTRODUCED_17,X_INTRODUCED_14,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint array_int_element(X_INTRODUCED_21,X_INTRODUCED_7,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint array_bool_or([X_INTRODUCED_24,X_INTRODUCED_25],true);
constraint array_bool_or([X_INTRODUCED_27,X_INTRODUCED_28],true);
constraint array_bool_or([X_INTRODUCED_29,X_INTRODUCED_30],true);
constraint int_lin_ne_reif(X_INTRODUCED_23,[X_INTRODUCED_1,X_INTRODUCED_2],0,X_INTRODUCED_24):: defines_var(X_INTRODUCED_24);
constraint int_lin_ne_reif([-1],[X_INTRODUCED_3],-1,X_INTRODUCED_25):: defines_var(X_INTRODUCED_25);
constraint int_lin_ne(X_INTRODUCED_23,[X_INTRODUCED_1,X_INTRODUCED_3],0);
constraint int_lin_ne_reif(X_INTRODUCED_23,[X_INTRODUCED_2,X_INTRODUCED_1],0,X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint int_lin_ne_reif(X_INTRODUCED_23,[X_INTRODUCED_3,X_INTRODUCED_2],0,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint int_lin_ne_reif(X_INTRODUCED_23,[X_INTRODUCED_2,X_INTRODUCED_3],0,X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
constraint int_lin_ne_reif([1],[X_INTRODUCED_3],1,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
solve :: int_search(L,first_fail,indomain_min,complete) satisfy;
